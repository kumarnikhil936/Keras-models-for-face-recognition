Have implemented various CNN models to do the face recognition task. 
All the models are stored in the mmodels.py file. One can instantiate a
model by simply calling the function name in the main.py file. For each 
model we have defined a separate log directory, tensorboard handle and 
callbacks. One can view the computational graph corresponding to model by 
running the run_tensorboard.sh file. The different models implemented are:

Simple Model
This is a very simple CNN model implemented in Keras. The model architecture 
layers looks like this in sequence
Convolution, Convolution, Pool, Dropout, Flatten, Dense, Dropout, Dense

Zero Padding layers are also appended between some layers. ReLU is used as 
activation function for Convolution and dense layers, while for the last dense 
layer a sigmoid function is used. Max pooling type of pooling has been with a 
2x2 filter size. 
One can explore the structure in more detail by looking into tensorboard 
generated graphs.	

Alexnet Model
The alexnet  modelhas been implemented in Keras. The model architecture 
layers looks like this in sequence
Convolution, Convolution, Pool, Convolution, Convolution, Pool, Convolution, 
Convolution, Convolution, Pool, Convolution, Convolution, Convolution, Pool,
Convolution, Convolution, Convolution, Pool, Flatten, Dense, Dropout, Dense, Dropout

Zero Padding layers are also appended between some layers. ReLU is used as 
activation function for Convolution and dense layers, while for the last dense 
layer a sigmoid function is used. Max pooling type of pooling has been with a 
2x2 filter size. 
One can explore the structure in more detail by looking into tensorboard 
generated graphs.	

Lenet Model
This is a Lenet model implemented in Keras. The model architecture 
layers looks like this in sequence
Convolution, Pool, Convolution, Pool, Flatten, Dense, Dense

Zero Padding layers are also appended between some layers. ReLU is used as 
activation function for Convolution and dense layers, while for the last dense 
layer a sigmoid function is used. Max pooling type of pooling has been with a 
2x2 filter size. 
One can explore the structure in more detail by looking into tensorboard 
generated graphs.	

The trained models corresponding to each model is also saved using the 
keras api 'save'. The models are saved in .h5 file, which can later be converted 
to 'tflite' format and can be further deployed on emebedded platforms. 

During the evaluation phase, the actual number of match pairs (ones) and mismatched
pairs (zeros) are printed out and also how many were correctly classified by 
the model. Accordingly, we print a score on the test data.
